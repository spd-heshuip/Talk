package com.example.shuip.talk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.example.shuip.talk.model.Contact;

import java.util.Date;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CONTACT.
*/
public class ContactDao extends AbstractDao<Contact, Long> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Memberid = new Property(1, long.class, "memberid", false, "MEMBERID");
        public final static Property Contactid = new Property(2, long.class, "contactid", false, "CONTACTID");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Headbig = new Property(5, String.class, "headbig", false, "HEADBIG");
        public final static Property Headmid = new Property(6, String.class, "headmid", false, "HEADMID");
        public final static Property Headsmall = new Property(7, String.class, "headsmall", false, "HEADSMALL");
        public final static Property Registetime = new Property(8, Date.class, "registetime", false, "REGISTETIME");
        public final static Property Createtime = new Property(9, Date.class, "createtime", false, "CREATETIME");
        public final static Property Pinyin = new Property(10, String.class, "pinyin", false, "PINYIN");
    };


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTACT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MEMBERID' INTEGER NOT NULL ," + // 1: memberid
                "'CONTACTID' INTEGER NOT NULL ," + // 2: contactid
                "'EMAIL' TEXT NOT NULL ," + // 3: email
                "'NAME' TEXT NOT NULL ," + // 4: name
                "'HEADBIG' TEXT NOT NULL ," + // 5: headbig
                "'HEADMID' TEXT NOT NULL ," + // 6: headmid
                "'HEADSMALL' TEXT NOT NULL ," + // 7: headsmall
                "'REGISTETIME' INTEGER NOT NULL ," + // 8: registetime
                "'CREATETIME' INTEGER NOT NULL ," + // 9: createtime
                "'PINYIN' TEXT NOT NULL );"); // 10: pinyin
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTACT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();




        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMemberid());
        stmt.bindLong(3, entity.getContactid());
        stmt.bindString(4, entity.getEmail());
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getHeadbig());
        stmt.bindString(7, entity.getHeadmid());
        stmt.bindString(8, entity.getHeadsmall());
        stmt.bindLong(9, entity.getRegisteTime() == null ? new Date().getTime() :
                entity.getRegisteTime().getTime());
        stmt.bindLong(10, entity.getCreatetime().getTime());
        stmt.bindString(11, entity.getPinyin());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // memberid
            cursor.getLong(offset + 2), // contactid
            cursor.getString(offset + 3), // email
            cursor.getString(offset + 4), // name
            cursor.getString(offset + 5), // headbig
            cursor.getString(offset + 6), // headmid
            cursor.getString(offset + 7), // headsmall
            new Date(cursor.getLong(offset + 8)), // registetime
            new Date(cursor.getLong(offset + 9)), // createtime
            cursor.getString(offset + 10) // pinyin
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberid(cursor.getLong(offset + 1));
        entity.setContactid(cursor.getLong(offset + 2));
        entity.setEmail(cursor.getString(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setHeadbig(cursor.getString(offset + 5));
        entity.setHeadmid(cursor.getString(offset + 6));
        entity.setHeadsmall(cursor.getString(offset + 7));
        entity.setRegisteTime(new Date(cursor.getLong(offset + 8)));
        entity.setCreatetime(new Date(cursor.getLong(offset + 9)));
        entity.setPinyin(cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

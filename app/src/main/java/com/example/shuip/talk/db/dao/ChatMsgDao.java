package com.example.shuip.talk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.example.shuip.talk.model.ChatMsg;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CHAT_MSG.
*/
public class ChatMsgDao extends AbstractDao<ChatMsg, Long> {

    public static final String TABLENAME = "CHAT_MSG";

    /**
     * Properties of entity ChatMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Memberid = new Property(1, long.class, "memberid", false, "MEMBERID");
        public final static Property Contactid = new Property(2, long.class, "contactid", false, "CONTACTID");
        public final static Property Chatmsg = new Property(3, String.class, "chatmsg", false, "CHATMSG");
        public final static Property Chattime = new Property(4, java.util.Date.class, "chattime", false, "CHATTIME");
        public final static Property Chattype = new Property(5, int.class, "chattype", false, "CHATTYPE");
        public final static Property Isreceive = new Property(6, int.class, "isreceive", false, "ISRECEIVE");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
    };


    public ChatMsgDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_MSG' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MEMBERID' INTEGER NOT NULL ," + // 1: memberid
                "'CONTACTID' INTEGER NOT NULL ," + // 2: contactid
                "'CHATMSG' TEXT NOT NULL ," + // 3: chatmsg
                "'CHATTIME' INTEGER NOT NULL ," + // 4: chattime
                "'CHATTYPE' INTEGER NOT NULL ," + // 5: chattype
                "'ISRECEIVE' INTEGER NOT NULL ," + // 6: isreceive
                "'STATUS' INTEGER NOT NULL );"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_MSG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMemberid());
        stmt.bindLong(3, entity.getContactid());
        stmt.bindString(4, entity.getChatmsg());
        stmt.bindLong(5, entity.getChattime().getTime());
        stmt.bindLong(6, entity.getChattype());
        stmt.bindLong(7, entity.getIsreceive());
        stmt.bindLong(8, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatMsg readEntity(Cursor cursor, int offset) {
        ChatMsg entity = new ChatMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // memberid
            cursor.getLong(offset + 2), // contactid
            cursor.getString(offset + 3), // chatmsg
            new java.util.Date(cursor.getLong(offset + 4)), // chattime
            cursor.getInt(offset + 5), // chattype
            cursor.getInt(offset + 6), // isreceive
            cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberid(cursor.getLong(offset + 1));
        entity.setContactid(cursor.getLong(offset + 2));
        entity.setChatmsg(cursor.getString(offset + 3));
        entity.setChattime(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setChattype(cursor.getInt(offset + 5));
        entity.setIsreceive(cursor.getInt(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.example.shuip.talk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.example.shuip.talk.model.RequestMsg;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table REQUEST_MSG.
*/
public class RequestMsgDao extends AbstractDao<RequestMsg, Long> {

    public static final String TABLENAME = "REQUEST_MSG";

    /**
     * Properties of entity RequestMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Memberid = new Property(1, long.class, "memberid", false, "MEMBERID");
        public final static Property Contactid = new Property(2, long.class, "contactid", false, "CONTACTID");
        public final static Property RequesiId = new Property(3, long.class, "requesiId", false, "REQUESI_ID");
        public final static Property Requestmsg = new Property(4, String.class, "requestmsg", false, "REQUESTMSG");
        public final static Property Requesttime = new Property(5, java.util.Date.class, "requesttime", false, "REQUESTTIME");
        public final static Property Contactemail = new Property(6, String.class, "contactemail", false, "CONTACTEMAIL");
        public final static Property Contactname = new Property(7, String.class, "contactname", false, "CONTACTNAME");
        public final static Property Contactheadsmall = new Property(8, String.class, "contactheadsmall", false, "CONTACTHEADSMALL");
        public final static Property Contactheadmid = new Property(9, String.class, "contactheadmid", false, "CONTACTHEADMID");
        public final static Property Contactheadbig = new Property(10, String.class, "contactheadbig", false, "CONTACTHEADBIG");
        public final static Property Contactregistetime = new Property(11, java.util.Date.class, "contactregistetime", false, "CONTACTREGISTETIME");
        public final static Property Status = new Property(12, int.class, "status", false, "STATUS");
    };


    public RequestMsgDao(DaoConfig config) {
        super(config);
    }
    
    public RequestMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REQUEST_MSG' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MEMBERID' INTEGER NOT NULL ," + // 1: memberid
                "'CONTACTID' INTEGER NOT NULL ," + // 2: contactid
                "'REQUESI_ID' INTEGER NOT NULL ," + // 3: requesiId
                "'REQUESTMSG' TEXT," + // 4: requestmsg
                "'REQUESTTIME' INTEGER NOT NULL ," + // 5: requesttime
                "'CONTACTEMAIL' TEXT," + // 6: contactemail
                "'CONTACTNAME' TEXT," + // 7: contactname
                "'CONTACTHEADSMALL' TEXT," + // 8: contactheadsmall
                "'CONTACTHEADMID' TEXT," + // 9: contactheadmid
                "'CONTACTHEADBIG' TEXT," + // 10: contactheadbig
                "'CONTACTREGISTETIME' INTEGER," + // 11: contactregistetime
                "'STATUS' INTEGER NOT NULL );"); // 12: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REQUEST_MSG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RequestMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMemberid());
        stmt.bindLong(3, entity.getContactid());
        stmt.bindLong(4, entity.getRequestid());
 
        String requestmsg = entity.getRequestmsg();
        if (requestmsg != null) {
            stmt.bindString(5, requestmsg);
        }
        stmt.bindLong(6, entity.getRequesttime().getTime());
 
        String contactemail = entity.getContactemail();
        if (contactemail != null) {
            stmt.bindString(7, contactemail);
        }
 
        String contactname = entity.getContactname();
        if (contactname != null) {
            stmt.bindString(8, contactname);
        }
 
        String contactheadsmall = entity.getContactheadsmall();
        if (contactheadsmall != null) {
            stmt.bindString(9, contactheadsmall);
        }
 
        String contactheadmid = entity.getContactheadmid();
        if (contactheadmid != null) {
            stmt.bindString(10, contactheadmid);
        }
 
        String contactheadbig = entity.getContactheadbig();
        if (contactheadbig != null) {
            stmt.bindString(11, contactheadbig);
        }
 
        java.util.Date contactregistetime = entity.getContactregistetime();
        if (contactregistetime != null) {
            stmt.bindLong(12, contactregistetime.getTime());
        }
        stmt.bindLong(13, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RequestMsg readEntity(Cursor cursor, int offset) {
        RequestMsg entity = new RequestMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // memberid
            cursor.getLong(offset + 2), // contactid
            cursor.getLong(offset + 3), // requesiId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // requestmsg
            new java.util.Date(cursor.getLong(offset + 5)), // requesttime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contactemail
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // contactname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // contactheadsmall
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // contactheadmid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // contactheadbig
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // contactregistetime
            cursor.getInt(offset + 12) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RequestMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberid(cursor.getLong(offset + 1));
        entity.setContactid(cursor.getLong(offset + 2));
        entity.setRequestid(cursor.getLong(offset + 3));
        entity.setRequestmsg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRequesttime(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setContactemail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContactname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContactheadsmall(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContactheadmid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setContactheadbig(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setContactregistetime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setStatus(cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RequestMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RequestMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
